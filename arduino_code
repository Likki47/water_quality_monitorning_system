#include <WiFi.h>

// Replace with your network credentials
const char* ssid = "";
const char* password = "";
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27,16,2);  // set the LCD 
int m1=2;
int m2=4;
#define TdsSensorPin 27
#define VREF 3.3              // analog reference voltage(Volt) of the ADC
#define SCOUNT  30           // sum of sample point

int analogBuffer[SCOUNT];     // store the analog value in the array, read from ADC
int analogBufferTemp[SCOUNT];
int analogBufferIndex = 0;
int copyIndex = 0;
int hogaya=false;
float averageVoltage = 0;
float tdsValue = 0;
float temperature = 16;       // current temperature for compensation

// median filtering algorithm
int getMedianNum(int bArray[], int iFilterLen){
  int bTab[iFilterLen];
  for (byte i = 0; i<iFilterLen; i++)
  bTab[i] = bArray[i];
  int i, j, bTemp;
  for (j = 0; j < iFilterLen - 1; j++) {
    for (i = 0; i < iFilterLen - j - 1; i++) {
      if (bTab[i] > bTab[i + 1]) {
        bTemp = bTab[i];
        bTab[i] = bTab[i + 1];
        bTab[i + 1] = bTemp;
      }
    }
  }
  if ((iFilterLen & 1) > 0){
    bTemp = bTab[(iFilterLen - 1) / 2];
  }
  else {
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
  }
  return bTemp;
}

// Set web server port number to 80
WiFiServer server(80);

// Variable to store the HTTP request
String header;
// Auxiliar variables to store the current output state
String Relay1State = "off";
String Relay2State = "off";

// Assign output variables to GPIO pins
const int Relay1 = 26;
const int Relay2 = 28;


// Current time
unsigned long currentTime = millis();
// Previous time
unsigned long previousTime = 0; 
// Define timeout time in milliseconds (example: 2000ms = 2s)
const long timeoutTime = 2000;

void setup() {
  pinMode(m1,OUTPUT);
  pinMode(m2,OUTPUT);
  Serial.begin(115200);
  // Initialize the output variables as outputs
  pinMode(Relay1, OUTPUT);

  // Set outputs to LOW
  digitalWrite(Relay1, LOW);
  pinMode(Relay2, OUTPUT);

  // Set outputs to LOW
  digitalWrite(Relay2, LOW);

  // Connect to Wi-Fi network with SSID and password
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  // Print local IP address and start web server
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  server.begin();
  lcd.init();
  lcd.clear();         
  lcd.backlight(); 
}

void loop(){
   hogaya = false;
  WiFiClient client = server.available();   // Listen for incoming clients
  if (client) {                             // If a new client connects,
    currentTime = millis();
    previousTime = currentTime;
    Serial.println("New Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected() && currentTime - previousTime <= timeoutTime) {  // loop while the client's connected
      currentTime = millis();
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
 // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();
            
            // turns the GPIOs on and off
            if (header.indexOf("GET /26/on") >= 0) {
              Serial.println("motor is ON");
              Relay1State = "on";
              digitalWrite(Relay1, HIGH);
              digitalWrite(m1,LOW);  
              digitalWrite(m2,HIGH);
              delay(1000);
              digitalWrite(m1,LOW);  
              digitalWrite(m2,LOW);
              Serial.print("MOTOR IS IN WATER! ON THE CLIENT");
              
            } else if (header.indexOf("GET /26/off") >= 0) {
              Serial.println("motor is OFF");
              Relay1State = "off";
              digitalWrite(Relay1, LOW);
              digitalWrite(m1,HIGH);  
              digitalWrite(m2,LOW);
              delay(4000);
              digitalWrite(m1,LOW);  
              digitalWrite(m2,LOW);
              delay(1000);
              Serial.print("PPM IS NOTED ! MOTOR MOVES UP");
            } 

            if (header.indexOf("GET /28/on") >= 0) {
              Serial.println("TDS is ON");
              Relay2State = "on";
              digitalWrite(Relay2, HIGH);
               // Convert voltage to calibrated TDS value
              static unsigned long analogSampleTimepoint = millis();
  if(millis()-analogSampleTimepoint > 40U){     //every 40 milliseconds,read the analog value from the ADC
    analogSampleTimepoint = millis();
    analogBuffer[analogBufferIndex] = analogRead(TdsSensorPin);    //read the analog value and store into the buffer
    analogBufferIndex++;
    if(analogBufferIndex == SCOUNT){ 
      analogBufferIndex = 0;
    }
  }   
  
  static unsigned long printTimepoint = millis();
  
  if(millis()-printTimepoint > 800U){
    
    printTimepoint = millis();
    for(copyIndex=0; copyIndex<SCOUNT; copyIndex++){
      analogBufferTemp[copyIndex] = analogBuffer[copyIndex];
      
      // read the analog value more stable by the median filtering algorithm, and convert to voltage value
      averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF / 1024.0;
      
      //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0)); 
      float compensationCoefficient = 1.0+0.02*(temperature-25.0);
      //temperature compensation
      float compensationVoltage=averageVoltage/compensationCoefficient;
      
      //convert voltage value to tds value
      tdsValue=(133.42*compensationVoltage*compensationVoltage*compensationVoltage - 255.86*compensationVoltage*compensationVoltage + 857.39*compensationVoltage)*0.5;
      if(!hogaya){
      //Serial.print("voltage:");
      //Serial.print(averageVoltage,2);
      //Serial.print("V   ");
      Serial.print("TDS Value:");
      Serial.print(tdsValue,0);
      Serial.println("ppm");
      hogaya=true;
      lcd.setCursor(0,0);   //Set cursor to character 2 on line 0
      lcd.print("TDS VAL:");
      lcd.setCursor(9,0);
      lcd.print(tdsValue);
      delay(2000); 
    }
    }
  }
            } else if (header.indexOf("GET /28/off") >= 0) {
              Serial.println("TDS is OFF");
              Relay2State = "off";
              digitalWrite(Relay2, LOW);
            } 
            // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            // CSS to style the on/off buttons 
            // Feel free to change the background-color and font-size attributes to fit your preferences
            client.println("<style>html { background-image:#water.jpg;font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".rounded-corners { background-color: #ede7f6; border: none; color: black; padding: 16px 40px;border-radius:50%");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".rounded-corners {background-color: #ffab91;}</style></head>");
            
            // Web Page Heading
            client.println("<body><h1 style=background-color:#b0bec5;padding: 25px 40px>WATER MONITORING SYSTEM</h1>");
            client.println("<body><h3 style=background-color:#cfd8dc;padding: 20px 30px>Motor control and TDS system </h3>");
            
            // Display current state, and ON/OFF buttons for GPIO 26  
            client.println("<p>MOTOR - " + Relay1State + "</p>");
            // If the output26State is off, it displays the ON button       
            if (Relay1State=="off") {
              client.println("<p><a href=\"/26/on\"><button class=\"button\">ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/26/off\"><button class=\"button button2\">OFF</button></a></p>");
            } 


              client.println("<p>TDS - " + Relay2State + "</p>");             
              if (Relay2State=="off") {
              client.println("<p><a href=\"/28/on\"><button class=\"button\">ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/28/off\"><button class=\"button button2\">OFF</button></a></p>");
            }   
            // Display current state, and ON/OFF buttons for GPIO 27  
           
            // If the output27State is off, it displays the ON button       
            client.println("<h3>TDS Value: ");
            client.println(tdsValue);
            client.println(" ppm</h3>");
            client.println("</body></html>");
            
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}
